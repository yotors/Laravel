# render.yaml
# Defines the services for the Laravel application on Render.
# See https://render.com/docs/blueprint-spec for the full reference.

# Replace placeholders like <your-github-username-or-org>/<your-repo-name>
# and <your-render-ghcr-credential-name> with actual values.

services:
  # --------------------------------------
  # PostgreSQL Database Service
  # --------------------------------------
  - type: pserv # PostgreSQL Service
    name: laravel-db # You can customize this name (e.g., myapp-db)
    region: oregon # Choose your preferred region: oregon, frankfurt, ohio, singapore, virginia
    plan: free # Uses the free plan for PostgreSQL.
               # REMEMBER: Free PostgreSQL on Render expires after 30 days.
               # Data will be lost unless upgraded to a paid plan.
    # ipAllowList: [] # Default allows connections from other Render services in your account.
    postgresMajorVersion: "16" # Specify desired PostgreSQL major version

  # --------------------------------------
  # Laravel Web Service (from Docker Image)
  # --------------------------------------
  - type: web # Web Service
    name: laravel-app # You can customize this name (e.g., myapp-web)
    region: oregon # IMPORTANT: Use the same region as your database for low latency.
    plan: free # Uses the free plan for Web Services.
               # REMEMBER: Free web services spin down after 15 mins of inactivity.
    env: docker # Specify Docker environment
    image:
      # URL of the Docker image in GitHub Container Registry (GHCR)
      # Replace with your actual image path from GHCR.
      # Example: ghcr.io/your-github-username/your-repo-name:latest
      # Using a specific SHA tag (e.g., :${{ github.sha }}) is recommended for immutable deploys.
      url: ghcr.io/<your-github-username-or-org>/<your-repo-name>:latest
    registryCredential:
      # Name of the registry credential you create in the Render dashboard for GHCR.
      # 1. Create a GitHub Personal Access Token (PAT) with `read:packages` scope.
      # 2. In Render: Team Settings -> Container Registry Credentials -> Add Credential.
      #    Use 'GitHub Container Registry' as registry, your GitHub username, and the PAT.
      #    Provide the name you gave this credential here.
      name: <your-render-ghcr-credential-name> # Example: my-ghcr-creds
    healthCheck:
      path: /health # Health check endpoint in your Laravel app
      port: 80 # Internal port Nginx listens on in the Docker container
      initialDelaySeconds: 60 # Increased delay for Laravel to boot and entrypoint scripts to run
    envVars:
      - key: APP_ENV
        value: production
      - key: APP_DEBUG
        value: "false" # Must be the string "false"
      - key: APP_URL
        # Render provides a default URL like https://your-service-name.onrender.com
        # It's good to set this explicitly once your service name is known.
        # Replace 'laravel-app' with the 'name' of this web service.
        value: https://laravel-app.onrender.com
      - key: DB_CONNECTION
        value: pgsql
      # DB_URL will be populated by the 'fromDatabase' directive below,
      # providing the connection string for the PostgreSQL service.
      - key: DB_URL
        fromDatabase:
          name: laravel-db # Must match the 'name' of your PostgreSQL service defined above
          property: connectionString
      - key: LOG_CHANNEL
        value: stderr
      - key: SESSION_DRIVER
        value: database
      - key: CACHE_STORE
        value: database
      - key: QUEUE_CONNECTION
        value: database # Use 'sync' for free tier if not running background workers
      # APP_KEY must be set as a secret in the Render dashboard environment settings for this service.
      # Generate one using: php artisan key:generate --show
    preDeployCommand: "php artisan migrate --force" # Runs migrations before new version is live
    # The container's CMD (from Dockerfile) will be used to start the app (php-fpm).
    # Render typically auto-detects the port (80 for Nginx in our container).
    # If needed, you can explicitly set:
    # containerPort: 80
